inriasegm      
dataset = InriaDataset(path = "../EO-Diffusion/data/AerialImageDataset", transforms=preprocess, compact=False, size = image_size,
        ch_last=False,img_ch=3, mask_ch=1, cond="image", uncond="segmentation", num_patches=2000, patch_overlap=0.5, category="vienna")
    train_dataloader,test_dataloader=create_inria_dataloaders(batch_size=args.batch_size,image_size=64, num_workers=4)
    model=MNISTDiffusion(timesteps=args.timesteps,
                image_size=64,
                in_channels=1,
                cond_channels = 3,
                out_channels = 1,
                base_dim=args.model_base_dim, # 128
                dim_mults=[1,2,4,8]).to(device)

class cond
python train.py --num_classes 5 --n_samples 16 --model_base_dim 128 --epochs 500

Inriafull
base_dim, dim_mults, attention_resolutions,num_res_blocks, num_heads=128,[1,2,4,8],[],1,1

clouds att
base_dim, dim_mults, attention_resolutions,num_res_blocks, num_heads=128,[1,2,3,4],[4,8],2,8
train_dataloader,test_dataloader=create_cloud_dataloaders(batch_size=args.batch_size, num_workers=4, size=image_size,
                ratio=0.5, length=-1, num_patches=2000, percents=[99,0,70])

Inria attn
    in_channels,cond_channels,out_channels=3,0,3
base_dim, dim_mults, attention_resolutions,num_res_blocks, num_heads=128,[1,2,3,4],[4,8],2,8
train_dataloader,test_dataloader=create_inria_dataloaders(batch_size=args.batch_size, num_workers=4, size=image_size,
                patch_overlap=0, length=0, num_patches=2000)

oscd
    in_channels,cond_channels,out_channels=3,0,3
    base_dim, dim_mults, attention_resolutions,num_res_blocks, num_heads=128,[1,2,3,4],[],1,1
    train_dataloader,test_dataloader=create_oscd_dataloaders(batch_size=args.batch_size, num_workers=4,
                    )